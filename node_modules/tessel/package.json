{
  "name": "tessel",
  "version": "0.3.15",
  "description": "Tessel command line tools and programmatic access library.",
  "main": "src/index.js",
  "scripts": {
    "test": "MOCK_USB=1 tap test/*.js test/badserver/test.js",
    "postinstall": "tessel install-drivers || true"
  },
  "bin": {
    "tessel": "./bin/tessel.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tessel/cli.git"
  },
  "author": {
    "name": "Technical Machine",
    "email": "team@technical.io"
  },
  "license": "MIT",
  "dependencies": {
    "async": "~0.2.9",
    "colony-compiler": "~0.6.21",
    "colors": "~0.6.0-1",
    "colorsafeconsole": "0.0.4",
    "debug": "^0.8.1",
    "effess": "~0.0.5",
    "fstream": "~0.1.25",
    "hardware-resolve": "~0.1.3",
    "humanize": "0.0.9",
    "keypress": "~0.2.1",
    "mkdirp": "~0.3.5",
    "my-local-ip": "~1.0.0",
    "nomnom": "~1.6.2",
    "read": "^1.0.5",
    "request": "~2.33.0",
    "semver": "^2.3.0",
    "structured-clone": "~0.2.2",
    "tar": "~0.1.18",
    "temp": "~0.6.0",
    "usb": "~0.3.11"
  },
  "devDependencies": {
    "tap": "~0.4.8",
    "tape": "~2.12.3"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# tessel cli and module\n\nThis is the Node module for communicating with Tessel by the commandline, pushing code and controlling network settings / configuration, or for programmatically interacting with Tessel.\n\n```\nnpm install tessel\n```\n\n## Module API\n\nYou can interact with Tessel programmatically.\n\n```js\nvar tessel = require('tessel');\n```\n\n<!--markdocs-->\n<!--generated by https://github.com/tcr/markdocs-->\n\n### Module\nThis module creates a single-threaded local server to which multiple processes can connect to a single Tessel over USB, as well as a `TesselClient` object that acts as a connection to the Tessel.\n\n```\nvar tessel = require('tessel-client');\n```\n\n&#x20;<a href=\"#api-Object-tessel-descriptors\" name=\"api-Object-tessel-descriptors\">#</a> <i>Object</i>&nbsp; tessel<b>.descriptors</b>  \nHash of USB descriptors.\n\n```\n{\n  TESSEL_VID: 0x1d50, TESSEL_PID: 0x6097,\n  TESSEL_OLD_VID: 0x1fc9, TESSEL_OLD_PID: 0x2002,\n  NXP_ROM_VID: 0x1fc9, NXP_ROM_PID: 0x000c\n}\n```\n\n&#x20;<a href=\"#api-tessel-connect-port-host-TesselClient\" name=\"api-tessel-connect-port-host-TesselClient\">#</a> tessel<b>.connect</b>( port, host ) &rarr; <i>TesselClient</i>  \nConnects to a local Tessel server.\n\n&#x20;<a href=\"#api-tessel-connectServer-path-callback-err-port-\" name=\"api-tessel-connectServer-path-callback-err-port-\">#</a> tessel<b>.connectServer</b>( path, callback(err, port) )  \nConnects a detached child server to a Tessel USB port. Returns the port at which the local Tessel server is listening.\n\n&#x20;<a href=\"#api-tessel-detectModems-callback-err-paths-\" name=\"api-tessel-detectModems-callback-err-paths-\">#</a> tessel<b>.detectModems</b>( callback(err, paths) )  \nRetrieve the path of each Tessel connected by USB in an array.\n\n&#x20;<a href=\"#api-tessel-selectModem-onnotfound-callback-err-path-\" name=\"api-tessel-selectModem-onnotfound-callback-err-path-\">#</a> tessel<b>.selectModem</b>( onnotfound(), callback(err, path) )  \nInteractive menu for selecting a Tessel to connect to. Will continue to poll until a suitable client is found, calling the `onnotfound` callback (perhaps continuously). Once a device is found, if multiple options exist, user is prompted for a selection. Then the `callback` is passed the path of the chosen device.\n\n&#x20;<a href=\"#api-tessel-acquire-path-callback-err-client-\" name=\"api-tessel-acquire-path-callback-err-client-\">#</a> tessel<b>.acquire</b>( [path, ], callback(err, client) )  \nAcquires a Tessel client, either interactively (via `selectModem`) or directly given the supplied `path`. The callback is passed a `TesselClient` object.\n\n&#x20;<a href=\"#api-tessel-bundleFiles-relpath-args-files-callback-err-bundle-\" name=\"api-tessel-bundleFiles-relpath-args-files-callback-err-bundle-\">#</a> tessel<b>.bundleFiles</b>( relpath, args, files, callback(err, bundle) )  \n`relpath` is the starting path of the application relative to root. `args` is the `process.argv` array. `files` is a map of tessel filesystem paths to local filesystem paths from the computer. This function returns to the callback with a bundle that can be deployed to Tessel.\n\n### `TesselClient` object\nCreated by `tessel.connect`.\n\n&#x20;<a href=\"#api-DuplexStream-client-stdout\" name=\"api-DuplexStream-client-stdout\">#</a> <i>DuplexStream</i>&nbsp; client<b>.stdout</b>  \nStream of output from the client module.\n\n&#x20;<a href=\"#api-client-send-json-\" name=\"api-client-send-json-\">#</a> client<b>.send</b>( json )  \nSends a message to be read by `process.on('message', callback)` by the child script.\n\n&#x20;<a href=\"#api-client-wifiStatus-callback-err-wifiStatus-\" name=\"api-client-wifiStatus-callback-err-wifiStatus-\">#</a> client<b>.wifiStatus</b>( callback(err, wifiStatus) )  \nReturns the status of the board's Wifi. `wifiStatus` has the properties \"connected\" and \"ip\".\n\n&#x20;<a href=\"#api-client-configureWifi-ssid-pass-security-opts-callback-err-wifiStatus-\" name=\"api-client-configureWifi-ssid-pass-security-opts-callback-err-wifiStatus-\">#</a> client<b>.configureWifi</b>( ssid, pass, security, [opts,] callback(err, wifiStatus) )  \nConnects to the given Wifi network. `security` can be one of \"wpa2\", \"wep\", or null. `pass` can be null if no security is chosen. `err` is true if the network could not be connected to. An optional `opts` object allows an integer `timeout` number to be specified in seconds.\n\n&#x20;<a href=\"#api-client-deployBundle-tarbundle-opts-onScriptStart-err-\" name=\"api-client-deployBundle-tarbundle-opts-onScriptStart-err-\">#</a> client<b>.deployBundle</b>( tarbundle, opts, onScriptStart(err) )  \nDeploys a tar bundle of code to the device. `opts` can have a flag `save` to write the bundle to the local filesystem, or `flash` to flash the device instead of running from RAM.\n\n&#x20;<a href=\"#api-client-erase-\" name=\"api-client-erase-\">#</a> client<b>.erase</b>()  \nErases internal flash on the device of any running code.\n\n&#x20;<a href=\"#api-client-stop-\" name=\"api-client-stop-\">#</a> client<b>.stop</b>()  \nStops the current script.\n\n&#x20;<a href=\"#api-client-deploy-filepath-argv-onScriptStart-err-\" name=\"api-client-deploy-filepath-argv-onScriptStart-err-\">#</a> client<b>.deploy</b>( filepath, argv, onScriptStart(err) )  \nGiven a file path, automatically deploys the file and its nearest directory with a `package.json` file to Tessel.\n\n&#x20;<a href=\"#api-client-emits-script-start-\" name=\"api-client-emits-script-start-\">#</a> client &rarr; <i>emits \"script-start\"</i>  \nEmitted when a client script starts.\n\n&#x20;<a href=\"#api-client-emits-script-stop-\" name=\"api-client-emits-script-stop-\">#</a> client &rarr; <i>emits \"script-stop\"</i>  \nEmitted when a client script exits.\n\n<!--/markdocs-->\n\n## License\n\nMIT or Apache 2.0, at your option",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tessel/cli/issues"
  },
  "homepage": "https://github.com/tessel/cli",
  "bundleDependencies": [
    "async",
    "colony-compiler",
    "colors",
    "colorsafeconsole",
    "debug",
    "effess",
    "fstream",
    "hardware-resolve",
    "humanize",
    "keypress",
    "mkdirp",
    "my-local-ip",
    "nomnom",
    "read",
    "request",
    "semver",
    "structured-clone",
    "tar",
    "temp",
    "usb"
  ],
  "_id": "tessel@0.3.15",
  "_from": "tessel@"
}
